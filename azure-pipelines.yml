# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
- group: uwp_config
- name: AssemblyInfoPath
  value: '**/Properties/AssemblyInfo.cs'
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'x86|x64|ARM'
- name: buildConfiguration
  value: 'Release'
- name: appxPackageDir
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'
- name: Password
  value: $[variables.PfxPassword]
- name: NUGET_PACKAGES
  value: $(Pipeline.Workspace)/.nuget/packages

steps:
- task: NuGetToolInstaller@1
- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/**/packages.lock.json'
    restoreKeys: |
       nuget | "$(Agent.OS)"
       nuget
    path: $(NUGET_PACKAGES)
  displayName: Cache NuGet packages
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
- task: DownloadSecureFile@1
  name: signingCert
  displayName: 'Download CA certificate'
  inputs:
    secureFile: 'VtuberMusic-UWP_TemporaryKey.pfx'
- script: |
        $Info = Get-Content $(AssemblyInfoPath)
        $Info = $Info -replace "GitCommit",$(Build.SourceVersion)
        $Info = $Info -replace "Build.Count",$(Build.BuildNumber)
        Set-Content -Path $env:Wap_Project_Directory/Properties/AssemblyInfo.cs -Value $Info
  displayName: Write Git Commit
- task: VSBuild@1
  inputs:
    platform: 'x64'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)" /p:PackageCertificatePassword="$(Password)"'
- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(BuildConfiguration)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(build.artifactstagingdirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: drop'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    publishLocation: 'pipeline'
    artifact: 'VtuberMusic_UWP'