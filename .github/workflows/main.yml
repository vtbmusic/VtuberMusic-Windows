name: VtuberMusic-UWP 构建和发布

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: VtuberMusic-UWP
      Wap_Project_Directory: .\VtuberMusic-UWP

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    # - name: Remove the pfx
    #  run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate
    
    - name: Compress app package
      uses: coco-hkk/compress-action@v2.1
      id: compress
      with:
        target-directory-path: ${{ env.Wap_Project_Directory }}\AppPackages
        compress-tool: zip
    
    - name: Get commit comment
      run: git log --pretty=format:"%s" -1 > commit.txt
    
    - name: Create Release
      uses: ncipollo/release-action@v1.8.6
      with:
        bodyFile: commit.txt
        artifacts: ${{ steps.compress.outputs.archive }}
        commit: main
        tag: v2.0-pre-${{ github.run_number }}
        token: ${{ secrets.GITHUB_TOKEN }}
        prerelease: true
        

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2.2.3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
